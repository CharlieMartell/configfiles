"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" load plugins from vundle
source ~/.vim/plugins.vim

abbr funciton function
abbr teh the
abbr tempalte template

set nocompatible                " not compatible with vi
set autoread                    " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start
" set a map leader for more key combos
let mapleader = "\<space>"
let g:mapleader = "\<space>"

" code folding settings
set foldmethod=indent           " fold based on indent
set foldnestmax=10              " deepest fold is 10 levels
set nofoldenable                " don't fold by default
set foldlevel=1

syntax enable                   " show syntax highlighting

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin helpers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" goyo------------------------------------------------------------------------
nnoremap <leader>z :Goyo<CR>
"fzf runtime------------------------------------------------------------------
set rtp+=~/.fzf
nnoremap <C-t> :FZF<CR>

" Quickscope------------------------------------------------------------------
let g:qs_first_occurrence_highlight_color = 123
let g:qs_second_occurrence_highlight_color = 21
function! Quick_scope_selective(movement)
    let needs_disabling = 0
    if !g:qs_enable
        QuickScopeToggle
        redraw
        let needs_disabling = 1
    endif

    let letter = nr2char(getchar())

    if needs_disabling
        QuickScopeToggle
    endif

    return a:movement . letter
endfunction

let g:qs_enable = 0

for i in  [ 'f', 'F', 't', 'T' ]
    execute 'noremap <expr> <silent>' . i . " Quick_scope_selective('". i . "')"
endfor

" startify -- ----------------------------------------------------------------
" plugins: vim-startify {{{2
let g:startify_list_order = [
      \ ['   MRU '],
      \ 'files' ,
      \ ['   MRU DIR '],
      \ 'dir',
      \ ['   Sessions '],
      \ 'sessions',
      \ ['   Bookmarks '],
      \ 'bookmarks',
      \ ]

let g:startify_relative_path          = 0
let g:startify_files_number           = 8
let g:startify_session_persistence    = 0
let g:startify_session_autoload       = 0
let g:startify_session_delete_buffers = 1
let g:startify_change_to_dir          = 1
let g:startify_enable_special         = 0
let g:startify_enable_unsafe          = 0

let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ 'bundle/.*/doc',
      \ '/data/repo/neovim/runtime/doc',
      \ '/Users/mhi/local/vim/share/vim/vim74/doc',
      \ ]

let g:startify_bookmarks = [
        \ '~/.dotfiles/vim/vimrc.symlink',
        \ ]
hi StartifyBracket ctermfg=240
hi StartifyFooter  ctermfg=111
hi StartifyHeader  ctermfg=203
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240
let g:startify_custom_footer =
  \ ['', "   Praise the Sun", '']

let g:startify_custom_header = 
  \ map(split(system('solairesays'), '\n'), '"   ". v:val') + ['','']

" tmuxline -------------------------------------------------------------------
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'c'    : ['#(whoami)', '#(uptime | cud -d " " -f 1,2,3)'],
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W', '#F'],
      \'x'    : ['#(osascript ~/.dotfiles/applescripts/spotify.scpt)'],
      \'y'    : ['%R', '%a', '%Y'],
      \'z'    : '#H'}
" Autoclose ------------------------------------------------------------------

" Fix to let ESC work as espected with Autoclose plugin
let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}

" Syntastic ------------------------------------------------------------------

let g:syntastic_python_checkers = ['pyflakes']
let g:syntastic_ocaml_checkers = ['merlin']

" Nertree binding ------------------------------------------------------------
autocmd vimenter * NERDTree
autocmd VimEnter * wincmd p
map <F3> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"Enables NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
        exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
        exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')

" Utilsnips fixes ---------------------
let g:UltiSnipsExpandTrigger="<c-j>"

" Merlin for OCaml --------------------

" Vim needs to be built with Python scripting support, and must be
" able to find Merlin's executable on PATH.
if executable('ocamlmerlin') && has('python')
  let s:ocamlmerlin = substitute(system('opam config var share'), '\n$', '', '''') . "/ocamlmerlin"
  execute "set rtp+=".s:ocamlmerlin."/vim"
  execute "set rtp+=".s:ocamlmerlin."/vimbufsync"
endif
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"

" Filetype recognition for pyflakes
filetype on                     " enables filetype detection

" Devicons for ocaml
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {} " needed
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['ml'] = 'λ'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256                    " Explicitly tell vim that the terminal supports 256 colors"
set background=dark             " Setting dark mode "
colorscheme railscasts
let g:airline_theme='tomorrow'

" Spaces & Tabs
set tabstop=4       			" number of visual spaces per tab
set softtabstop=4   			" number of spaces in tab when editing
set expandtab       			" tabs are spaces

" UI Config
set number              		" show line numbers
set showcmd             		" show command in bottom bar
set wildmenu            		" visual autocomplete for command menu
set lazyredraw          		" redraw only when we need to.
set showmatch           		" highlight matching [{()}]
set encoding=utf-8
set cursorline                  " Shows a line under cursor

" Searching
set incsearch				    " search as characters are entered
set hlsearch				    " highlight matches
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch

" highlight last inserted text
nnoremap gV `[v`]

" Fix Strange backspace problem
set backspace=indent,eol,start

" Setup showing column numbers
set ruler

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General mappings/shortcuts for functionality
" Additional, plugin-specific mappings are located under
" the plugins section
autocmd BufWritePre *.py,*.js :call <SID>StripTrailingWhitespaces()
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" remove extra whitespace
nmap <leader><s><s> :%s/\s\+$<cr>

" toggle paste mode
map <leader>v :set paste!<cr>

" edit ~/.vimrc
map <leader>ev :e! ~/.vimrc<cr>
" edit vim plugins
map <leader>evp :e! ~/.vim/plugins.vim<cr>
" edit vim functions
map <leader>evf :e! ~/.vim/functions.vim<cr>
" edit gitconfig
map <leader>eg :e! ~/.gitconfig<cr>

" activate spell-checking alternatives
nmap ;s :set invspell spelllang=en<cr>

" toggle invisible characters
set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=↪
nmap <leader>l :set list!<cr>

" switch between current and last buffer
nmap <leader>. <c-^>

" enable . command in visual mode
vnoremap . :normal .<cr>

" toggle cursor line
nnoremap <leader>i :set cursorline!<cr>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Filetype specific plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" function for python indenting
au BufEnter *.py setf python
au BufEnter *.pyc setf python
au FileType python call FT_python()
function! FT_python()
    set tabstop=4       			" number of visual spaces per tab
    set softtabstop=4   			" number of spaces in tab when editing
    set expandtab       			" tabs are spaces
    set shiftwidth=4
endfunction

" ocp-indent for OCaml indenting
execute ":source " . "/Users/mac/.opam/4.01.0/share/vim/syntax/ocp-indent.vim"
au BufEnter *.ml setf ocaml
au BufEnter *.mli setf ocaml
au FileType ocaml call FT_ocaml()
function! FT_ocaml()
    set shiftwidth=2
    set tabstop=2
    let opamshare=system("opam config var share | tr -d '\n'")
    execute "autocmd FileType ocaml source".opamshare."/vim/syntax/ocp-indent.vim"
endfunction
